// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name ScribeUpSDK
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import DeveloperToolsSupport
import Foundation
@_exported import ScribeUpSDK
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol SubscriptionManagerListener : AnyObject {
  func onExit(_ error: ScribeUpSDK.SubscriptionManagerError?)
}
public enum ScribeUpLog {
  public enum Level {
    case debug, info, notice, warn, error, critical
    public static func == (a: ScribeUpSDK.ScribeUpLog.Level, b: ScribeUpSDK.ScribeUpLog.Level) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func log(_ message: Swift.String, level: ScribeUpSDK.ScribeUpLog.Level = .info, attrs: [Swift.String : any Swift.Encodable] = [:], jobId: Swift.String? = nil)
}
public struct JavaScriptHelper {
}
@objc @_Concurrency.MainActor public class MerchantLoginViewController : UIKit.UIViewController {
  @_Concurrency.MainActor public init(merchant: ScribeUpSDK.Merchant, jobId: Swift.String = "", token: Swift.String, apiController: ScribeUpSDK.ScribeUpAPIController, uploadUrls: [Swift.String : Foundation.URL]? = nil)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @objc override dynamic public func viewDidLoad()
  @objc deinit
}
public enum DDSite {
  case us1
  case us3
  case us5
  case eu1
  case ap1
  public static func == (a: ScribeUpSDK.DDSite, b: ScribeUpSDK.DDSite) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ScribeUpDDConfig {
  public let clientToken: Swift.String
  public let site: ScribeUpSDK.DDSite
  public let environment: Swift.String
  public init(clientToken: Swift.String, site: ScribeUpSDK.DDSite = .us5, environment: Swift.String = "production")
}
public enum ScribeUpSDKVersion {
  public static let version: Swift.String
  public static let build: Swift.String
}
public struct SubscriptionManagerError : Swift.Error {
  public let code: Swift.Int
  public let message: Swift.String
  public init(code: Swift.Int, message: Swift.String)
}
public struct SimpleSuccessResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JobResponse : Swift.Codable {
  public let id: Swift.String
  public let status: Swift.String
  public let type: Swift.String?
  public let failedReason: Swift.String?
  public let failedReasonFactor: Swift.String?
  public let created: Swift.String?
  public let modified: Swift.String?
  public let externalUserId: Swift.String?
  public let merchant: ScribeUpSDK.Merchant
  public let sdkUploads: [Swift.String : Foundation.URL]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Merchant : Swift.Codable {
  public let id: Swift.String
  public let merchantId: Swift.String
  public let name: Swift.String
  public let logo: Swift.String?
  public let sdkLoginUrl: Swift.String
  public let sdkAuthenticatedUrl: Swift.String?
  public let sdkAuthenticatedIsRegex: Swift.Bool?
  public let sdkAuthCheck: ScribeUpSDK.AuthCheck
  public let isSdk: Swift.Bool
  public let interceptors: [ScribeUpSDK.MerchantInterceptor]
  public let interceptorBlocks: [ScribeUpSDK.MerchantInterceptor]?
  public let altUserAgents: [Swift.String : Swift.String]?
  public let sdkLoggedInChecks: [ScribeUpSDK.SDKLoggedInCheck]?
  public let sdkDisableLinks: [Swift.String]?
  public let sdkRemoveElements: [Swift.String]?
  public let userAgent: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthCheck : Swift.Codable {
  public let method: Swift.String?
  public let headers: [Swift.String : Swift.String]?
  public let url: Swift.String?
  public let data: Swift.String?
  public let cookieUrl: Swift.String?
  public let context: Swift.String?
  public let useCurl: Swift.Bool?
  public let skipCookies: Swift.Bool?
  public let skipOnDevice: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MerchantInterceptor : Swift.Codable {
  public let url: Swift.String?
  public let urlRegex: Swift.String?
  public let pattern: Swift.String?
  public let key: Swift.String?
  public let transformer: Swift.String?
  public let matchType: Swift.String?
  public let method: Swift.String?
  public let subKey: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SDKLoggedInCheck : Swift.Codable {
  public let key: Swift.String?
  public let type: Swift.String?
  public let value: Swift.String?
  public let cookies: [ScribeUpSDK.CookiePredicate]?
  public let pattern: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CookiePredicate : Swift.Codable {
  public let name: Swift.String?
  public let value: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JobStatusResponse : Swift.Codable {
  public let id: Swift.String
  public let status: Swift.String
  public let type: Swift.String
  public let failedReason: Swift.String?
  public let failedReasonFactor: Swift.String?
  public let created: Swift.String
  public let modified: Swift.String
  public let externalUserId: Swift.String
  public let merchant: ScribeUpSDK.Merchant
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SessionResponse : Swift.Codable {
  public let id: Swift.String
  public let valid: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JobStartResponse : Swift.Codable {
  public let id: Swift.String
  public let status: Swift.String
  public let type: Swift.String
  public let failedReason: Swift.String?
  public let failedReasonFactor: Swift.String?
  public let created: Swift.String
  public let modified: Swift.String
  public let externalUserId: Swift.String
  public let merchant: ScribeUpSDK.Merchant
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class ScribeUpAPIController {
  public init(baseURL: Foundation.URL)
  public func getJobStatus(jobId: Swift.String, token: Swift.String, completion: @escaping (Swift.Result<ScribeUpSDK.JobResponse, any Swift.Error>) -> Swift.Void)
  public func updateJobStatus(jobId: Swift.String, status: Swift.String, token: Swift.String, completion: @escaping (Swift.Result<ScribeUpSDK.SimpleSuccessResponse, any Swift.Error>) -> Swift.Void)
  public func createSession(sessionBody: [Swift.String : Any], completion: @escaping (Swift.Result<ScribeUpSDK.SessionResponse, any Swift.Error>) -> Swift.Void)
  public func startJob(jobBody: [Swift.String : Any], completion: @escaping (Swift.Result<ScribeUpSDK.SimpleSuccessResponse, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension Swift.Dictionary where Value : Swift.Hashable {
  public var combinedHash: Swift.Int {
    get
  }
}
@available(iOS 11.0, *)
extension ScribeUpSDK.MerchantLoginViewController : WebKit.WKHTTPCookieStoreObserver {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func cookiesDidChange(in cookieStore: WebKit.WKHTTPCookieStore)
}
extension ScribeUpSDK.MerchantLoginViewController : WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @available(iOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webViewDidClose(_ webView: WebKit.WKWebView)
}
extension ScribeUpSDK.MerchantLoginViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SubscriptionManagerViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency public static let sdkVersion: Swift.String
  @_Concurrency.MainActor @preconcurrency public init(url: Swift.String, productName: Swift.String = "Subscription Manager", listener: (any ScribeUpSDK.SubscriptionManagerListener)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
extension ScribeUpSDK.ScribeUpLog.Level : Swift.Equatable {}
extension ScribeUpSDK.ScribeUpLog.Level : Swift.Hashable {}
extension ScribeUpSDK.DDSite : Swift.Equatable {}
extension ScribeUpSDK.DDSite : Swift.Hashable {}
